---
title: "Curriculum and Pedagogy"
subtitle: "useR 2025"
author: "Maria Tackett"
footer: "[user-tutorials-2025.github.io/teaching-with-r-github](https://user-tutorials-2025.github.io/teaching-with-r-github)"
logo: ""
format: 
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
image: "images/tidyverse.png"
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:
      width: 200
filters: 
  - webr
webr:
  packages: ['tidyverse', 'palmerpenguins']
---

# Curriculum

```{r}
#| include: false

library(tidyverse)
library(palmerpenguins)

penguins <- penguins |>
  filter(!is.na(flipper_length_mm))
```

```{webr-r}
#| context: setup

#remove 2 penguins with no measurements

penguins <- penguins |> 
  filter(!is.na(flipper_length_mm))
```

## A modern approach

-   Modern approach to teaching statistics and now the onset of data science

-   How is this different from the traditional approach - the computing is infused throughout

-   Bring in curriculum guidelines - what they are saying about computing

## Intro Data Science

![Image from [Data Science in a Box](https://datasciencebox.org)](images/ds-topics.png){fig-align="center"}

## Intro Data Science topics {.midi}

::::: columns
::: {.column width="50%"}
**Unit 1: Exploring data**

-   Data visualization 
-   Exploring multivariable relationships
-   Data wrangling
-   Importing data 
:::

::: {.column width="50%"}
**Unit 2: Making rigorous conclusions**

-   Relationships between multiple variables
-   Predicting numeric and binary outcomes
-   Model building and feature engineering
-   Model evaluation and cross validation 
-   Simulation-based inference
:::
:::::

::: small
Source: Çetinkaya-Rundel & Ellison (2020)
:::

## Intro Data Science topics {.midi}

:::::: columns
::: {.column width="50%"}
**Additional topics (varies by instructor)**

-   Interactive dashboards with Shiny
-   Working productively with AI tools  
-   Text analysis
-   Customizing Quarto reports and presentations
:::

:::: {.column width="50%"}
::: highlight
**Computing throughout course**

-   Statistical analysis using R
-   Reproducible reports using Quarto
-   Version control and collaboration using git and GitHub
:::
::::
::::::

<br>

::: small
Source: Çetinkaya-Rundel & Ellison (2020)
:::

## Computing as a learning objective

::: highlight
"The goal of teaching computing and information technologies is to remove obstacles to engagement with a problem."

(Nolan & Temple Lang, 2010)
:::

. . .

::: incremental
-   Opportunity for students to gain experience using professional computing tools

-   Equip students to work with more realistic and complex data

-   Students can develop a reproducible workflow while learning statistical methods
:::

<!--# Add in curriculum guidelines, Hardin & Horton papers, and 2010 paper-->

<br>

::: small
Nolan, D., & Temple Lang, D. (2010)
:::

# Pedagogy

## Pedagogy - UPDATE IMAGE

:::::: columns
::: {.column width="50%"}
![](images/sta199-pedagogy.png){fig-align="center" width="60%"}
:::

:::: {.column width="50%"}
::: midi
-   **Build**: Introduce new content

-   **Train**: Put concepts into practice through hands-on class activities

    -   **Do**: Steps needed to accomplish a task

    -   **Think**: How to accomplish task in future

-   **Create:** Demonstrate learning through a variety of assessments
:::
::::
::::::

::: small
Source: Meyer and Çetinkaya-Rundel (2025, preprint)
:::

## Tidyverse

::::: columns
::: {.column width="50%"}
*The tidyverse is an opinionated [**collection of R packages**](https://www.tidyverse.org/packages) designed for data science. All packages share an underlying design philosophy, grammar, and data structures.*

\-[tidyverse.org](https://tidyverse.org)
:::

::: {.column width="50%"}
![](images/tidyverse.png){fig-align="center" width="80%"}
:::
:::::

```{r}
#| eval: false
library(tidyverse)
```

## Tidyverse

![Source: Çetinkaya-Rundel et al. (2022)](images/tidyverse-ds-workflow.png)

## Pedagogical benefits of the tidyverse {.midi}

::: incremental
-   **Consistency**: Syntax, function interfaces, argument names and order follow patterns

-   **Mixability**: Ability to use base R and other functions within tidyverse syntax

-   **Scalability**: Unified approach that works for data sets from a wide range of types and sizes

-   **User-centered design**: Function interfaces designed with users in mind

-   **Readability**: Interfaces designed to produce readable code

-   **Community**: Large, active, and welcoming community of users and resources

-   **Transferability**: Data manipulation verbs inherit SQL's query syntax
:::

::: small
Source: Çetinkaya-Rundel et al. (2022)
:::

## Tidy data

1.  Each variable forms a column.
2.  Each observation forms a row.
3.  Each type of observational unit forms a table.

. . .

::::: columns
::: {.column width="50%"}
<center><b>Not tidy data</b></center>

![](images/not-tidy-data.png){alt="Tidy data" fig-align="center" width="100%"}
:::

::: {.column width="50%"}
<center><b>Tidy data</b></center>

![](images/tidy-data.png){alt="Tidy data" fig-align="center" width="100%"}
:::
:::::

::: aside
Source: Wickham (2014)
:::

## The pipe

The **pipe,** `|>`, is used to pass information from one function to another in the tidyverse.

. . .

When reading code aloud in English, say "and then" whenever you see a pipe. Below is a pipeline for a children's poem.\*

::: aside
\* Source: [R for Data Science 1st Edition](https://r4ds.had.co.nz/pipes.html)
:::

<br>

. . .

::::: columns
::: {.column width="50%"}
Little bunny Foo Foo\
Went hopping through the forest\
Scooping up the field mice\
And bopping them on the head
:::

::: {.column width="50%"}
```{r}
#| eval: false

foo_foo |>
  hop(through = forest) |>
  scoop(up = field_mice) |>
  bop(on = head)
```
:::
:::::

<!--# do bunny foo foo example from Hadley Wickhim-->

## Data: Palmer penguins {.midi}

We will analyze the `penguins` data set from the [**palmerpenguins** R package](https://allisonhorst.github.io/palmerpenguins/) maintained by Dr. Allison Horst. This data set contains measurements and other characteristics for penguins observed near Palmer Station in Antarctica. The data were originally collected by Dr. Kristen Gorman.

We will use the following variables:

-   `species`: a factor denoting penguin species (Adélie, Chinstrap and Gentoo)
-   `flipper_length_mm`: an integer denoting flipper length (millimeters)
-   `body_mass_g`: an integer denoting body mass (grams)

[Click here](https://allisonhorst.github.io/palmerpenguins/reference/penguins.html) for the full codebook.

## `penguins` data frame

```{r}
#| eval: false
library(palmerpenguins)
penguins
```

```{r}
#| echo: false
penguins
```

## Base R: Compute summary statistics

::: question
Compute the mean flipper length for Palmer penguins.
:::

```{r}
penguins |> slice(1:5)
```

<br>

. . .

```{r}
mean(penguins$flipper_length_mm)
```

## Base R: Compute summary statistics - add citation {.midi}

::: question
For each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.
:::

<br>

. . .

**Compute number of penguins by species**

```{r}
num_penguins <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = length)
names(num_penguins)[2] <- "num_penguins"
```

. . .

**Compute mean flipper length by species**

```{r}
mean_flipper <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = mean)

names(mean_flipper)[2] <- "mean_flipper_length"

```

## Base R: Compute summary statistics - add citation {.midi}

::: question
For each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.
:::

<br>

**Combine results and sort data frame**

```{r}
df <- merge(num_penguins, mean_flipper)
df[order(df$num_penguins, decreasing = TRUE), ]
```

## Base R: Full code - add citation

```{r}
num_penguins <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = length)
names(num_penguins)[2] <- "num_penguins"

mean_flipper <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = mean)

names(mean_flipper)[2] <- "mean_flipper_length"

df <- merge(num_penguins, mean_flipper)
df[order(df$num_penguins, decreasing = TRUE), ]
```

## Your turn!

::: question
Use tidyverse syntax to make the data frame described below:

For each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.
:::

```{webr-r}
penguins
# add code here
```

<!--# Note that example is inspired by educators paper and DS in the classroom workshop-->

## Closer look at the code

::::: columns
::: {.column width="40%"}
For each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.
:::

::: {.column width="60%"}
```{r}
penguins
```
:::
:::::

## Closer look at the code

::::: columns
::: {.column width="40%"}
[For each species]{style="font-weight:bold;background-color:#ccddeb;"}, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "2"
penguins |>
  group_by(species)
```
:::
:::::

## Closer look at the code

::::: columns
::: {.column width="40%"}
For each species, [compute the number of penguins]{style="font-weight:bold;background-color:#ccddeb;"} and the mean flipper length. Display the results in descending order by number of penguins.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "3-4"
penguins |>
  group_by(species) |>
  summarise(n = n(), 
            )
```
:::
:::::

## Closer look at the code

::::: columns
::: {.column width="40%"}
For each species, compute the number of penguins and [the mean flipper length]{style="font-weight:bold;background-color:#ccddeb;"}. Display the results in descending order by number of penguins.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "4-6"
penguins |>
  group_by(species) |>
  summarise(n = n(), 
            mean = mean(flipper_length_mm)
            )
```
:::
:::::

## Closer look at the code

::::: columns
::: {.column width="40%"}
For each species, compute the number of penguins and the mean flipper length. [Display the results in descending order by number of penguins.]{style="font-weight:bold;background-color:#ccddeb;"}
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "7"
penguins |>
  group_by(species) |>
  summarise(n = n(), 
            mean = mean(flipper_length_mm,
                        na.rm = TRUE)
            ) |>
  arrange(desc(n))
```
:::
:::::

## Your turn! \[Time permitting\]

::: question
-   Create a new data frame that only contains the penguin from each species with the largest body mass.
-   Use [**dplyr**](https://dplyr.tidyverse.org/reference/index.html) functions to continue exploring the `penguins` data set.
:::

<br>

```{webr-r}
# add code here

```

## Tidyverse beyond the intro course

## Quote from tidyverse paper?

-   Educator's guide to the tidyverse

## What about AI? {.midi}

-   We recommend minimal use of generative artificial intelligence (AI) for coding when coding proficiency is a learning objective in an introductory course

-   There are a variety of perspectives on using generative AI tools to teaching coding:

    ::: small
    -   Bien, J., & Mukherjee, G. (2025). [Generative AI for Data Science 101: Coding Without Learning To Code](https://www.tandfonline.com/doi/full/10.1080/26939169.2024.2432397?src=exp-mr). *Journal of Statistics and Data Science Education*, *33*(2), 129-142.

    -   [Generative AI in Statistics and Data Science Education](https://www.tandfonline.com/journals/ujse21/collections/generative-ai) (Journal of Statistics and Data Science collection)

    -   [Leveraging LLMs for student feedback in introductory data science courses](https://mine-cetinkaya-rundel.github.io/help-from-ai-uscots25/) by Mine Çetinkaya-Rundel (USCOTS presentation)

    -   [Learning the tidyverse with the help of AI tools](https://www.tidyverse.org/blog/2025/04/learn-tidyverse-ai/) by Mine Çetinkaya-Rundel (Tidyverse blog)
    :::

# Infrastructure

## Why use RStudio in the cloud?

-   Reduce friction at first exposure to R
    -   Start using R on Day 1!
-   Avoid local installation
-   Install R and RStudio on a server and provide access to students:
    -   Centralized RStudio server
    -   Dockerized RStudio server (what we're using today)
    -   Posit Cloud

\[Check paper - are these the reasons in the paper?\]

::: aside
Çetinkaya-Rundel and Rundel (2018)
:::

## Dockerized Rstudio

-   Infrastructure options

-   Brief introduction to Quarto (like an R Markdown file)

-   Make a qmd file . Render it.

-   Turn the qmd into a web-r file.

## Discussion

::: question
-   What is something you've seen thus far that you find exciting? Want to learn more about? Would like to incorporate in your teaching?

-   Any other questions/ comments/ discussion points?
:::
